BZERO(3)                                                        Linux Programmer's Manual                                                        BZERO(3)

[1mNAME[0m
       bzero, explicit_bzero - zero a byte string

[1mSYNOPSIS[0m
       [1m#include <strings.h>[0m

       [1mvoid bzero(void *[4m[22ms[24m[1m, size_t [4m[22mn[24m[1m);[0m

       [1m#include <string.h>[0m

       [1mvoid explicit_bzero(void *[4m[22ms[24m[1m, size_t [4m[22mn[24m[1m);[0m

[1mDESCRIPTION[0m
       The  [1mbzero[22m()  function  erases  the data in the [4mn[24m bytes of the memory starting at the location pointed to by [4ms[24m, by writing zeros (bytes containing
       '\0') to that area.

       The [1mexplicit_bzero[22m() function performs the same task as [1mbzero[22m().  It differs from [1mbzero[22m() in that it guarantees that compiler  optimizations  will
       not remove the erase operation if the compiler deduces that the operation is "unnecessary".

[1mRETURN VALUE[0m
       None.

[1mVERSIONS[0m
       [1mexplicit_bzero[22m() first appeared in glibc 2.25.

[1mATTRIBUTES[0m
       For an explanation of the terms used in this section, see [1mattributes[22m(7).

       ┌─────────────────┬───────────────┬─────────┐
       │[1mInterface        [22m│ [1mAttribute     [22m│ [1mValue   [22m│
       ├─────────────────┼───────────────┼─────────┤
       │[1mbzero[22m(),         │ Thread safety │ MT-Safe │
       │[1mexplicit_bzero[22m() │               │         │
       └─────────────────┴───────────────┴─────────┘
[1mCONFORMING TO[0m
       The  [1mbzero[22m()  function is deprecated (marked as LEGACY in POSIX.1-2001); use [1mmemset[22m(3) in new programs.  POSIX.1-2008 removes the specification of
       [1mbzero[22m().  The [1mbzero[22m() function first appeared in 4.3BSD.

       The [1mexplicit_bzero[22m() function is a nonstandard extension that is also present on some of the BSDs.  Some  other  implementations  have  a  similar
       function, such as [1mmemset_explicit[22m() or [1mmemset_s[22m().

[1mNOTES[0m
       The [1mexplicit_bzero[22m() function addresses a problem that security-conscious applications may run into when using [1mbzero[22m(): if the compiler can deduce
       that the location to zeroed will never again be touched by a [4mcorrect[24m program, then it may remove the [1mbzero[22m() call altogether.  This is  a  problem
       if  the  intent of the [1mbzero[22m() call was to erase sensitive data (e.g., passwords) to prevent the possibility that the data was leaked by an incor‐
       rect or compromised program.  Calls to [1mexplicit_bzero[22m() are never optimized away by the compiler.

       The [1mexplicit_bzero[22m() function does not solve all problems associated with erasing sensitive data:

       1. The [1mexplicit_bzero[22m() function does [4mnot[24m guarantee that sensitive data is completely erased from memory.  (The same is  true  of  [1mbzero[22m().)   For
          example,  there  may be copies of the sensitive data in a register and in "scratch" stack areas.  The [1mexplicit_bzero[22m() function is not aware of
          these copies, and can't erase them.

       2. In some circumstances, [1mexplicit_bzero[22m() can [4mdecrease[24m security.  If the compiler determined that the  variable  containing  the  sensitive  data
          could  be  optimized  to  be  stored  in  a  register  (because  it  is  small  enough  to  fit  in a register, and no operation other than the
          [1mexplicit_bzero[22m() call would need to take the address of the variable), then the [1mexplicit_bzero[22m() call will force the data to be copied from the
          register  to  a  location in RAM that is then immediately erased (while the copy in the register remains unaffected).  The problem here is that
          data in RAM is more likely to be exposed by a bug than data in a register, and thus the [1mexplicit_bzero[22m() call creates a brief time window where
          the sensitive data is more vulnerable than it would otherwise have been if no attempt had been made to erase the data.

       Note  that  declaring  the sensitive variable with the [1mvolatile [22mqualifier does [4mnot[24m eliminate the above problems.  Indeed, it will make them worse,
       since, for example, it may force a variable that would otherwise have been optimized into a register to instead be maintained in (more vulnerable)
       RAM for its entire lifetime.

       Notwithstanding  the  above  details,  for  security-conscious  applications, using [1mexplicit_bzero[22m() is generally preferable to not using it.  The
       developers of [1mexplicit_bzero[22m() anticipate that future compilers will recognize calls to [1mexplicit_bzero[22m() and take steps to ensure that all  copies
       of the sensitive data are erased, including copies in registers or in "scratch" stack areas.

[1mSEE ALSO[0m
       [1mbstring[22m(3), [1mmemset[22m(3), [1mswab[22m(3)

[1mCOLOPHON[0m
       This  page is part of release 5.02 of the Linux [4mman-pages[24m project.  A description of the project, information about reporting bugs, and the latest
       version of this page, can be found at https://www.kernel.org/doc/man-pages/.

Linux                                                                   2019-03-06                                                               BZERO(3)
